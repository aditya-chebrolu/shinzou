{
  "title": "Java Collections Cheat Sheet",
  "language": "java",
  "tags": [
    "java",
    "collections",
    "cheat sheet",
    "sets",
    "maps",
    "lists",
    "queues",
    "stacks"
  ],
  "sections": [
    {
      "subtitle": "Lists",
      "snippets": [
        {
          "description": [
            "ArrayList is a resizable array implementation of the List interface. It allows <span class=\"highlighted\">random access</span> to elements and provides methods to manipulate the size of the array that is used internally.",
            "Useful when <span class=\"highlighted\">frequent read operations</span> are needed."
          ],
          "code": "List<String> arrayList = new ArrayList<>();"
        },
        {
          "description": [
            "LinkedList implements the List and Deque interfaces. It uses a <span class=\"highlighted\">doubly-linked list</span> internally to store elements.",
            "Useful when <span class=\"highlighted\">frequent insertions and deletions</span> are needed as they are faster than in an ArrayList."
          ],
          "code": "List<String> linkedList = new LinkedList<>();"
        },
        {
          "description": [
            "Vector is similar to ArrayList but is <span class=\"highlighted\">synchronized</span>, meaning it is thread-safe.",
            "Rarely used in new code as <span class=\"highlighted\">Collections.synchronizedList()</span> is preferred."
          ],
          "code": "List<String> vector = new Vector<>();"
        },
        {
          "description": [
            "Stack is a subclass of Vector and represents a last-in-first-out (LIFO) stack of objects.",
            "Useful for scenarios where data needs to be stored and retrieved in <span class=\"highlighted\">LIFO</span> order."
          ],
          "code": "Stack<String> stack = new Stack<>();"
        },
        {
          "description": [
            "Synchronized lists are <span class=\"highlighted\">thread-safe</span> implementations of the List interface, created by wrapping another list using Collections.synchronizedList().",
            "Useful when a thread-safe list is needed."
          ],
          "code": "List<String> synchronizedList = Collections.synchronizedList(new ArrayList<>());"
        },
        {
          "description": "List interface methods.",
          "code": "arrayList.add(\"element\");\narrayList.get(0);\narrayList.set(0, \"newElement\");\narrayList.remove(0);\narrayList.size();\narrayList.contains(\"element\");\narrayList.clear();\n// LinkedList Specific Methods\nlinkedList.addFirst(\"element\");\nlinkedList.addLast(\"element\");\nlinkedList.getFirst();\nlinkedList.getLast();\nlinkedList.removeFirst();\nlinkedList.removeLast();\n// Stack Specific Methods\nstack.push(\"element\");\nstack.pop();\nstack.peek();\nstack.isEmpty();\nstack.search(\"element\");"
        }
      ]
    },
    {
      "subtitle": "Sets",
      "snippets": [
        {
          "description": [
            "HashSet implements the Set interface and <span class=\"highlighted\">uses a hash table</span> for storage. It does not guarantee the order of elements and allows null values.",
            "Useful when a unique collection of items is needed and <span class=\"highlighted\">order does not matter</span>."
          ],
          "code": "Set<String> hashSet = new HashSet<>();"
        },
        {
          "description": [
            "LinkedHashSet is similar to HashSet but maintains a linked list of the entries in the set, in the order in which they were inserted.",
            "Useful when <span class=\"highlighted\">iteration order is required to be the same as insertion order</span>."
          ],
          "code": "Set<String> linkedHashSet = new LinkedHashSet<>();"
        },
        {
          "description": [
            "TreeSet implements the Set interface and uses a <span class=\"highlighted\">red-black tree</span> for storage. It orders the elements based on their values.",
            "Useful when a <span class=\"highlighted\">sorted set</span> of unique items is needed."
          ],
          "code": "Set<String> treeSet = new TreeSet<>();"
        },
        {
          "description": [
            "ConcurrentSkipListSet is a scalable concurrent NavigableSet implementation based on a skip list. It maintains elements in a <span class=\"highlighted\">sorted order</span> and is <span class=\"highlighted\">thread-safe</span>.",
            "Useful in concurrent applications where a sorted set is needed."
          ],
          "code": "Set<String> concurrentSkipListSet = new ConcurrentSkipListSet<>();"
        },
        {
          "description": [
            "CopyOnWriteArraySet is a thread-safe variant of HashSet in which all mutative operations (add, set, and so on) are implemented by making a fresh copy of the underlying array.",
            "Useful in concurrent scenarios where <span class=\"highlighted\">reads are frequent</span> and <span class=\"highlighted\">writes are rare</span>."
          ],
          "code": "Set<String> copyOnWriteArraySet = new CopyOnWriteArraySet<>();"
        },
        {
          "description": ["Set interface methods."],
          "code": "hashSet.add(\"element\");\nhashSet.remove(\"element\");\nhashSet.contains(\"element\");\nhashSet.size();\nhashSet.clear();\nhashSet.isEmpty();\n// Additional Set Methods\nSet<String> otherSet = new HashSet<>();\nhashSet.addAll(otherSet); // Adds all elements from another set\nhashSet.retainAll(otherSet); // Retains only elements that are in both sets\nhashSet.removeAll(otherSet); // Removes all elements that are in another set\nhashSet.equals(otherSet); // Compares two sets for equality\nhashSet.toArray(); // Converts the set to an array\n// TreeSet Specific Methods\ntreeSet.first();\ntreeSet.last();\ntreeSet.headSet(\"element\");\ntreeSet.tailSet(\"element\");\ntreeSet.subSet(\"start\", \"end\");\ntreeSet.comparator(); // Returns the comparator used to order the elements\ntreeSet.descendingSet(); // Returns a reverse order view of the elements\ntreeSet.floor(\"element\"); // Returns the greatest element less than or equal to the given element\ntreeSet.ceiling(\"element\"); // Returns the least element greater than or equal to the given element\ntreeSet.lower(\"element\"); // Returns the greatest element strictly less than the given element\ntreeSet.higher(\"element\"); // Returns the least element strictly greater than the given element\ntreeSet.pollFirst(); // Retrieves and removes the first (lowest) element\ntreeSet.pollLast(); // Retrieves and removes the last (highest) element"
        }
      ]
    },
    {
      "subtitle": "Maps",
      "snippets": [
        {
          "description": [
            "<span class=\"highlighted\">HashMap</span> implements the Map interface using a hash table. It allows <span class=\"highlighted\">null values</span> and one <span class=\"highlighted\">null key</span>. It does not guarantee the order of its elements.",
            "Useful when a key-value pair collection is needed without ordering."
          ],
          "code": "Map<String, String> hashMap = new HashMap<>();"
        },
        {
          "description": [
            "LinkedHashMap is similar to HashMap but maintains a doubly-linked list running through all of its entries. This linked list defines the iteration ordering, which is the order in which keys were inserted.",
            "Useful when insertion order needs to be preserved."
          ],
          "code": "Map<String, String> linkedHashMap = new LinkedHashMap<>();"
        },
        {
          "description": [
            "TreeMap implements the NavigableMap interface and uses a red-black tree to store its elements. It orders the keys based on their natural order or by a specified comparator.",
            "Useful when a sorted map is required."
          ],
          "code": "Map<String, String> treeMap = new TreeMap<>();"
        },
        {
          "description": [
            "Hashtable is similar to HashMap but is synchronized, meaning it is thread-safe. It does not allow null keys or values.",
            "Rarely used in new code as Collections.synchronizedMap() is preferred."
          ],
          "code": "Map<String, String> hashtable = new Hashtable<>();"
        },
        {
          "description": [
            "ConcurrentHashMap is a thread-safe variant of HashMap. It allows concurrent read and write operations and provides high concurrency with scalability.",
            "Useful in concurrent applications where a map is needed."
          ],
          "code": "Map<String, String> concurrentHashMap = new ConcurrentHashMap<>();"
        },
        {
          "description": [
            "WeakHashMap implements the Map interface with weak keys, which means that the keys are subject to garbage collection when they are no longer in use.",
            "Useful when using keys that should be eligible for garbage collection."
          ],
          "code": "Map<String, String> weakHashMap = new WeakHashMap<>();"
        },
        {
          "description": [
            "IdentityHashMap uses reference equality (==) instead of object equality (equals()) for comparing keys.",
            "Useful when reference equality is required."
          ],
          "code": "Map<String, String> identityHashMap = new IdentityHashMap<>();"
        },
        {
          "description": [
            "ConcurrentSkipListMap is a scalable concurrent NavigableMap implementation based on a skip list. It maintains elements in a sorted order and is thread-safe.",
            "Useful in concurrent applications where a sorted map is needed."
          ],
          "code": "Map<String, String> concurrentSkipListMap = new ConcurrentSkipListMap<>();"
        },
        {
          "description": "Map interface methods.",
          "code": "hashMap.put(\"key\", \"value\");\nhashMap.get(\"key\");\nhashMap.remove(\"key\");\nhashMap.containsKey(\"key\");\nhashMap.containsValue(\"value\");\nhashMap.size();\nhashMap.clear();\nhashMap.isEmpty();\nhashMap.keySet(); // Returns a Set view of the keys contained in this map\nhashMap.values(); // Returns a Collection view of the values contained in this map\nhashMap.entrySet(); // Returns a Set view of the mappings contained in this map\n// TreeMap Specific Methods\ntreeMap.firstKey();\ntreeMap.lastKey();\ntreeMap.headMap(\"key\");\ntreeMap.tailMap(\"key\");\ntreeMap.subMap(\"startKey\", \"endKey\");\ntreeMap.comparator(); // Returns the comparator used to order the elements\ntreeMap.descendingMap(); // Returns a reverse order view of the mappings\ntreeMap.floorKey(\"key\"); // Returns the greatest key less than or equal to the given key\ntreeMap.ceilingKey(\"key\"); // Returns the least key greater than or equal to the given key\ntreeMap.lowerKey(\"key\"); // Returns the greatest key strictly less than the given key\ntreeMap.higherKey(\"key\"); // Returns the least key strictly greater than the given key\ntreeMap.pollFirstEntry(); // Retrieves and removes the first (lowest) entry\ntreeMap.pollLastEntry(); // Retrieves and removes the last (highest) entry\n// IdentityHashMap Specific Methods\nidentityHashMap.keySet(); // Returns a Set view of the keys contained in this map\nidentityHashMap.values(); // Returns a Collection view of the values contained in this map\nidentityHashMap.entrySet(); // Returns a Set view of the mappings contained in this map\n// ConcurrentSkipListMap Specific Methods\nconcurrentSkipListMap.firstKey();\nconcurrentSkipListMap.lastKey();\nconcurrentSkipListMap.headMap(\"key\");\nconcurrentSkipListMap.tailMap(\"key\");\nconcurrentSkipListMap.subMap(\"startKey\", \"endKey\");\nconcurrentSkipListMap.comparator(); // Returns the comparator used to order the elements\nconcurrentSkipListMap.descendingMap(); // Returns a reverse order view of the mappings\nconcurrentSkipListMap.floorKey(\"key\"); // Returns the greatest key less than or equal to the given key\nconcurrentSkipListMap.ceilingKey(\"key\"); // Returns the least key greater than or equal to the given key\nconcurrentSkipListMap.lowerKey(\"key\"); // Returns the greatest key strictly less than the given key\nconcurrentSkipListMap.higherKey(\"key\"); // Returns the least key strictly greater than the given key\nconcurrentSkipListMap.pollFirstEntry(); // Retrieves and removes the first (lowest) entry\nconcurrentSkipListMap.pollLastEntry(); // Retrieves and removes the last (highest) entry"
        }
      ]
    },
    {
      "subtitle": "Queues",
      "snippets": [
        {
          "description": [
            "PriorityQueue is an unbounded priority queue based on a priority heap. It orders elements according to their <span class=\"highlighted\">natural ordering</span> or by a specified comparator.",
            "Useful when elements need to be processed based on their priority."
          ],
          "code": "Queue priorityQueue = new PriorityQueue<>();"
        },
        {
          "description": [
            "LinkedList can be used as a queue by implementing the Queue interface. It provides methods to insert elements at the end and remove them from the beginning.",
            "Useful for implementing a simple queue."
          ],
          "code": "Queue linkedListQueue = new LinkedList<>();"
        },
        {
          "description": [
            "Deque stands for double-ended queue and allows elements to be added or removed from <span class=\"highlighted\">both ends</span>.",
            "Useful for implementing both stacks and queues."
          ],
          "code": "Deque deque = new LinkedList<>();"
        },
        {
          "description": [
            "ArrayDeque is a resizable array implementation of the Deque interface. It has no capacity restrictions and is faster than LinkedList when used as a deque.",
            "Useful for <span class=\"highlighted\">stack and queue operations</span>."
          ],
          "code": "Deque arrayDeque = new ArrayDeque<>();"
        },
        {
          "description": [
            "BlockingQueue is an interface that represents a thread-safe queue that supports operations that wait for the queue to become non-empty when retrieving an element and wait for space to become available in the queue when storing an element.",
            "Useful for producer-consumer scenarios."
          ],
          "code": "BlockingQueue blockingQueue = new ArrayBlockingQueue<>(10);"
        },
        {
          "description": [
            "SynchronousQueue is a BlockingQueue in which each insert operation must wait for a corresponding remove operation by another thread, and vice versa.",
            "Useful for handoff designs where an object should be passed from one thread to another."
          ],
          "code": "SynchronousQueue synchronousQueue = new SynchronousQueue<>();"
        },
        {
          "description": ["Queue interface methods."],
          "code": "queue.add(\"element\"); // Adds an element to the queue\nqueue.offer(\"element\"); // Adds an element to the queue\nqueue.remove(); // Removes and returns the head of the queue\nqueue.poll(); // Retrieves and removes the head of the queue, or returns null if the queue is empty\nqueue.element(); // Retrieves, but does not remove, the head of the queue\nqueue.peek(); // Retrieves, but does not remove, the head of the queue, or returns null if the queue is empty\nqueue.size(); // Returns the number of elements in the queue\nqueue.clear(); // Removes all elements from the queue\nqueue.isEmpty(); // Returns true if the queue contains no elements\nqueue.contains(\"element\"); // Returns true if the queue contains the specified element\nqueue.toArray(); // Returns an array containing all of the elements in the queue\n\n// ArrayDeque Specific Methods\narrayDeque.addFirst(\"element\"); // Inserts the specified element at the front of this deque\narrayDeque.addLast(\"element\"); // Inserts the specified element at the end of this deque\narrayDeque.removeFirst(); // Retrieves and removes the first element of this deque\narrayDeque.removeLast(); // Retrieves and removes the last element of this deque\narrayDeque.getFirst(); // Retrieves, but does not remove, the first element of this deque\narrayDeque.getLast(); // Retrieves, but does not remove, the last element of this deque\n\n// PriorityQueue Specific Methods\npriorityQueue.add(\"element\");\npriorityQueue.offer(\"element\");\npriorityQueue.remove();\npriorityQueue.poll();\npriorityQueue.peek();\npriorityQueue.size();\npriorityQueue.clear();\npriorityQueue.contains(\"element\");\npriorityQueue.toArray();\n\n// BlockingQueue Specific Methods\nblockingQueue.put(\"element\"); // Adds an element to the queue, waiting if necessary for space to become available\nblockingQueue.take(); // Retrieves and removes the head of the queue, waiting if necessary until an element becomes available\nblockingQueue.offer(\"element\", 1, TimeUnit.SECONDS); // Adds an element to the queue, waiting up to the specified wait time for space to become available\nblockingQueue.poll(1, TimeUnit.SECONDS); // Retrieves and removes the head of the queue, waiting up to the specified wait time if necessary for an element to become available\n\n// Deque Specific Methods\ndeque.addFirst(\"element\");\ndeque.addLast(\"element\");\ndeque.removeFirst();\ndeque.removeLast();\ndeque.getFirst();\ndeque.getLast();\n\n// SynchronousQueue Specific Methods\nsynchronousQueue.put(\"element\");\nsynchronousQueue.take();"
        }
      ]
    },
    {
      "subtitle": "Stacks",
      "snippets": [
        {
          "description": [
            "Stack is a class that represents a last-in, first-out (LIFO) stack of objects. It extends Vector and has five operations that allow a vector to be treated as a stack.",
            "Useful when you need a LIFO data structure."
          ],
          "code": "Stack<String> stack = new Stack<>();"
        },
        {
          "description": [
            "Deque (Double Ended Queue) interface can be used as a stack with ArrayDeque implementation.",
            "Useful when you need a stack but also want the additional functionality provided by Deque."
          ],
          "code": "Deque<String> stackDeque = new ArrayDeque<>();"
        },
        {
          "description": [
            "Methods: Common methods for Stack and Deque used as Stack."
          ],
          "code": "stack.push(\"element\"); // Pushes an element onto the stack\nstack.pop(); // Removes and returns the top element of the stack\nstack.peek(); // Returns the top element of the stack without removing it\nstack.isEmpty(); // Checks if the stack is empty\nstack.search(\"element\"); // Returns the 1-based position where an element is on the stack\nstack.size(); // Returns the number of elements in the stack\nstack.clear(); // Removes all elements from the stack\nstack.contains(\"element\"); // Checks if the stack contains the specified element\n\nstackDeque.push(\"element\"); // Pushes an element onto the stack\nstackDeque.pop(); // Removes and returns the top element of the stack\nstackDeque.peek(); // Returns the top element of the stack without removing it\nstackDeque.isEmpty(); // Checks if the stack is empty\nstackDeque.size(); // Returns the number of elements in the stack\nstackDeque.clear(); // Removes all elements from the stack\nstackDeque.contains(\"element\"); // Checks if the stack contains the specified element"
        }
      ]
    }
  ]
}
