{
  "title": "Swift String Methods Cheat Sheet",
  "language": "swift",
  "tags": ["swift", "arrays", "cheat sheet"],
  "sections": [
    {
      "subtitle": "Creating Strings",
      "snippets": [
        {
          "description": "Using string literal",
          "code": "let str1 = \"Hello\""
        },
        {
          "description": "From a character array",
          "code": "let chars: [Character] = [\"H\", \"e\", \"l\", \"l\", \"o\"]\nlet str2 = String(chars)"
        },
        {
          "description": "From byte array",
          "code": "let bytes: [UInt8] = [72, 101, 108, 108, 111]\nlet str3 = String(bytes: bytes, encoding: .utf8)!"
        }
      ]
    },
    {
      "subtitle": "Length and Character Access",
      "snippets": [
        {
          "description": "Returns the length of the string",
          "code": "let length = str1.count"
        },
        {
          "description": "Returns the character at the specified index",
          "code": "let ch = str1[str1.startIndex]"
        }
      ]
    },
    {
      "subtitle": "Substring",
      "snippets": [
        {
          "description": "Returns a substring starting from the specified index",
          "code": "let startIndex = str1.index(str1.startIndex, offsetBy: 2)\nlet sub1 = String(str1[startIndex...])"
        },
        {
          "description": "Returns a substring from beginIndex to endIndex - 1",
          "code": "let endIndex = str1.index(str1.startIndex, offsetBy: 4)\nlet sub2 = String(str1[str1.index(str1.startIndex, offsetBy: 1)..<endIndex])"
        }
      ]
    },
    {
      "subtitle": "Concatenation",
      "snippets": [
        {
          "description": "Concatenates the specified string to the end of this string",
          "code": "let newStr = str1 + \" World\""
        }
      ]
    },
    {
      "subtitle": "Contains",
      "snippets": [
        {
          "description": "Returns true if the string contains the specified sequence of char values",
          "code": "let contains = str1.contains(\"ell\")"
        }
      ]
    },
    {
      "subtitle": "Equality Check",
      "snippets": [
        {
          "description": "Compares this string to the specified object",
          "code": "let isEqual = str1 == \"Hello\""
        },
        {
          "description": "Compares this string to another string, ignoring case considerations",
          "code": "let isEqualIgnoreCase = str1.lowercased() == \"hello\".lowercased()"
        }
      ]
    },
    {
      "subtitle": "Starts and Ends With",
      "snippets": [
        {
          "description": "Tests if this string starts with the specified prefix",
          "code": "let starts = str1.hasPrefix(\"He\")"
        },
        {
          "description": "Tests if this string ends with the specified suffix",
          "code": "let ends = str1.hasSuffix(\"lo\")"
        }
      ]
    },
    {
      "subtitle": "Index of Characters and Substrings",
      "snippets": [
        {
          "description": "Returns the index within this string of the first occurrence of the specified character",
          "code": "let index1 = str1.firstIndex(of: \"e\")?.utf16Offset(in: str1)"
        },
        {
          "description": "Returns the index within this string of the first occurrence of the specified substring",
          "code": "let index2 = str1.range(of: \"ll\")?.lowerBound.utf16Offset(in: str1)"
        },
        {
          "description": "Returns the index within this string of the last occurrence of the specified character",
          "code": "let lastIndex1 = str1.lastIndex(of: \"l\")?.utf16Offset(in: str1)"
        },
        {
          "description": "Returns the index within this string of the last occurrence of the specified substring",
          "code": "let lastIndex2 = str1.range(of: \"l\", options: .backwards)?.lowerBound.utf16Offset(in: str1)"
        }
      ]
    },
    {
      "subtitle": "Case Conversion",
      "snippets": [
        {
          "description": "Converts all characters in the string to lowercase",
          "code": "let lower = str1.lowercased()"
        },
        {
          "description": "Converts all characters in the string to uppercase",
          "code": "let upper = str1.uppercased()"
        }
      ]
    },
    {
      "subtitle": "Trimming and Replacing",
      "snippets": [
        {
          "description": "Removes leading and trailing whitespace from the string",
          "code": "let trimmed = str1.trimmingCharacters(in: .whitespacesAndNewlines)"
        },
        {
          "description": "Replaces all occurrences of a specified character with a new character",
          "code": "let replaced1 = str1.replacingOccurrences(of: \"l\", with: \"p\")"
        },
        {
          "description": "Replaces each substring of this string that matches the literal target sequence with the specified literal replacement sequence",
          "code": "let replaced2 = str1.replacingOccurrences(of: \"ll\", with: \"yy\")"
        }
      ]
    },
    {
      "subtitle": "Splitting and Conversion to Array",
      "snippets": [
        {
          "description": "Splits this string around matches of the given regular expression",
          "code": "let parts = str1.split(separator: \" \")"
        },
        {
          "description": "Converts this string to a new character array",
          "code": "let charArray = Array(str1)"
        }
      ]
    },
    {
      "subtitle": "Converting Strings",
      "snippets": [
        { "description": "To char array", "code": "let chars = Array(str1)" },
        {
          "description": "To byte array",
          "code": "let bytes = [UInt8](str1.utf8)"
        },
        {
          "description": "From char array",
          "code": "let strFromChars = String(chars)"
        },
        {
          "description": "From byte array",
          "code": "let strFromBytes = String(bytes)"
        }
      ]
    },
    {
      "subtitle": "Mutating Strings",
      "snippets": [
        {
          "description": "Replacing characters",
          "code": "let newStr1 = str1.replacingOccurrences(of: \"l\", with: \"p\")"
        },
        {
          "description": "Appending strings",
          "code": "let newStr2 = str1 + \" World\""
        },
        {
          "description": "Substrings",
          "code": "let newStr3 = String(str1[str1.index(str1.startIndex, offsetBy: 1)..<str1.index(str1.startIndex, offsetBy: 4)])"
        },
        {
          "description": "Inserting characters",
          "code": "var strBuilder = str1\nstrBuilder.insert(\"X\", at: str1.index(str1.startIndex, offsetBy: 2))\nlet newStr4 = strBuilder"
        }
      ]
    }
  ]
}
