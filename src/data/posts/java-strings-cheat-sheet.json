{
  "title": "Java Strings",
  "language": "java",
  "tags": ["java", "strings", "cheat sheet"],
  "sections": [
    {
      "subtitle": "Creating Strings",
      "snippets": [
        {
          "description": "Using string literal",
          "code": "String str1 = \"Hello\";"
        },
        {
          "description": "Using new keyword",
          "code": "String str2 = new String(\"Hello\");"
        },
        {
          "description": "From a char array",
          "code": "char[] chars = {'H', 'e', 'l', 'l', 'o'};\nString str3 = new String(chars);"
        },
        {
          "description": "From byte array",
          "code": "byte[] bytes = {72, 101, 108, 108, 111};\nString str4 = new String(bytes);"
        }
      ]
    },
    {
      "subtitle": "Length and Character Access",
      "snippets": [
        {
          "description": "Returns the length of the string",
          "code": "int length = str1.length();"
        },
        {
          "description": "Returns the character at the specified index",
          "code": "char ch = str1.charAt(0);"
        }
      ]
    },
    {
      "subtitle": "Substring",
      "snippets": [
        {
          "description": "Returns a substring starting from the specified index",
          "code": "String sub1 = str1.substring(2);"
        },
        {
          "description": "Returns a substring from beginIndex to endIndex - 1",
          "code": "String sub2 = str1.substring(1, 4);"
        }
      ]
    },
    {
      "subtitle": "Concatenation",
      "snippets": [
        {
          "description": "Concatenates the specified string to the end of this string",
          "code": "String newStr = str1.concat(\" World\");"
        }
      ]
    },
    {
      "subtitle": "Contains",
      "snippets": [
        {
          "description": "Returns true if the string contains the specified sequence of char values",
          "code": "boolean contains = str1.contains(\"ell\");"
        }
      ]
    },
    {
      "subtitle": "Equality Check",
      "snippets": [
        {
          "description": "Compares this string to the specified object",
          "code": "boolean isEqual = str1.equals(\"Hello\");"
        },
        {
          "description": "Compares this string to another string, ignoring case considerations",
          "code": "boolean isEqualIgnoreCase = str1.equalsIgnoreCase(\"hello\");"
        }
      ]
    },
    {
      "subtitle": "Starts and Ends With",
      "snippets": [
        {
          "description": "Tests if this string starts with the specified prefix",
          "code": "boolean starts = str1.startsWith(\"He\");"
        },
        {
          "description": "Tests if this string ends with the specified suffix",
          "code": "boolean ends = str1.endsWith(\"lo\");"
        }
      ]
    },
    {
      "subtitle": "Index of Characters and Substrings",
      "snippets": [
        {
          "description": "Returns the index within this string of the first occurrence of the specified character",
          "code": "int index1 = str1.indexOf('e');"
        },
        {
          "description": "Returns the index within this string of the first occurrence of the specified substring",
          "code": "int index2 = str1.indexOf(\"ll\");"
        },
        {
          "description": "Returns the index within this string of the last occurrence of the specified character",
          "code": "int lastIndex1 = str1.lastIndexOf('l');"
        },
        {
          "description": "Returns the index within this string of the last occurrence of the specified substring",
          "code": "int lastIndex2 = str1.lastIndexOf(\"l\");"
        }
      ]
    },
    {
      "subtitle": "Case Conversion",
      "snippets": [
        {
          "description": "Converts all characters in the string to lowercase",
          "code": "String lower = str1.toLowerCase();"
        },
        {
          "description": "Converts all characters in the string to uppercase",
          "code": "String upper = str1.toUpperCase();"
        }
      ]
    },
    {
      "subtitle": "Trimming and Replacing",
      "snippets": [
        {
          "description": "Removes leading and trailing whitespace from the string",
          "code": "String trimmed = str1.trim();"
        },
        {
          "description": "Replaces all occurrences of a specified character with a new character",
          "code": "String replaced1 = str1.replace('l', 'p');"
        },
        {
          "description": "Replaces each substring of this string that matches the literal target sequence with the specified literal replacement sequence",
          "code": "String replaced2 = str1.replace(\"ll\", \"yy\");"
        }
      ]
    },
    {
      "subtitle": "Splitting and Conversion to Array",
      "snippets": [
        {
          "description": "Splits this string around matches of the given regular expression",
          "code": "String[] parts = str1.split(\" \");"
        },
        {
          "description": "Converts this string to a new character array",
          "code": "char[] charArray = str1.toCharArray();"
        }
      ]
    },
    {
      "subtitle": "Converting Strings",
      "snippets": [
        {
          "description": "To char array",
          "code": "char[] chars = str1.toCharArray();"
        },
        {
          "description": "To byte array",
          "code": "byte[] bytes = str1.getBytes();"
        },
        {
          "description": "From char array",
          "code": "String strFromChars = new String(chars);"
        },
        {
          "description": "From byte array",
          "code": "String strFromBytes = new String(bytes);"
        }
      ]
    },
    {
      "subtitle": "Mutating Strings",
      "snippets": [
        {
          "description": "Replacing characters",
          "code": "String newStr1 = str1.replace('l', 'p');"
        },
        {
          "description": "Appending strings",
          "code": "String newStr2 = str1.concat(\" World\");"
        },
        {
          "description": "Substrings",
          "code": "String newStr3 = str1.substring(1, 4);"
        },
        {
          "description": "Inserting characters (using StringBuilder or StringBuffer)",
          "code": "StringBuilder sb = new StringBuilder(str1);\nsb.insert(2, 'X');\nString newStr4 = sb.toString();"
        }
      ]
    }
  ]
}
